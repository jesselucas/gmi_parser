const std = @import("std");
const expect = std.testing.expect;

/// SGR (Select Graphic Rendition) parameters
/// https://en.wikipedia.org/wiki/ANSI_escape_code
const SGR = enum(u7) {
    Reset = 0,
    Bold = 1,
    Faint = 2,
    Italic = 3,
    Underline = 4,
    SlowBlink = 5,
    RapidBlink = 6,
    Reverse = 7,
    Conceal = 8,
    CrossedOut = 9,
    DefaultFont = 10,
    AltFont1 = 11,
    AltFont2 = 12,
    AltFont3 = 13,
    AltFont4 = 14,
    AltFont5 = 15,
    AltFont6 = 16,
    AltFont7 = 17,
    AltFont8 = 18,
    AltFont9 = 19,
    Fraktur = 20,
    DoubleUnderline = 21,
    NormalIntensity = 22,
    NoItalicNoFraktur = 23,
    NoUnderline = 24,
    NoBlink = 25,
    ProportionalSpacing = 26,
    NotReversed = 27,
    Reveal = 28,
    NotCrossedOut = 29,
    // Foreground colors start at 30
    FgBlack = 30,
    FgRed = 31,
    FgGreen = 32,
    FgYellow = 33,
    FgBlue = 34,
    FgMagneta = 35,
    FgCyan = 36,
    FgWhite = 37,
    FgExtended = 38,
    DefaultForeground = 39,
    // Background colors start at 40
    BgBlack = 40,
    BgRed = 41,
    BgGreen = 42,
    BgYellow = 43,
    BgBlue = 44,
    BgMagneta = 45,
    BgCyan = 46,
    BgWhite = 47,
    BackgroundExtended = 48,
    DefaultBackground = 49,
    DisableProportionalSpacing = 50,
    Framed = 51,
    Encircled = 52,
    Overlined = 53,
    NeitherFramedNorEncircled = 54,
    NotOverlined = 55,
    SetUnderlineColor = 58,
    DefaultUnderlineColor = 59,
    Superscript = 73,
    Subscript = 74,
    NeitherSuperNorSub = 75,
    // Bright foreground colors start at 90
    FgBrightBlack = 90,
    FgBrightRed = 91,
    FgBrightGreen = 92,
    FgBrightYellow = 93,
    FgBrightBlue = 94,
    FgBrightMagenta = 95,
    FgBrightCyan = 96,
    FgBrightWhite = 97,
    // Bright background colors start at 100
    BgBrightBlack = 100,
    BgBrightRed = 101,
    BgBrightGreen = 102,
    BgBrightYellow = 103,
    BgBrightBlue = 104,
    BgBrightMagenta = 105,
    BgBrightCyan = 106,
    BgBrightWhite = 107,

    pub fn ansiCode(self: SGR) []const u8 {
        var buffer: [4]u8 = undefined;
        const s = std.fmt.bufPrint(&buffer, "{}m", .{@intFromEnum(self)}) catch unreachable;
        return s;
    }
};

test "SGR to ANSI code conversion" {
    const TestEntry = struct { SGR, []const u8 };
    const tests: []const TestEntry = &.{
        .{ SGR.Reset, "0m" },
        .{ SGR.Bold, "1m" },
        .{ SGR.Faint, "2m" },
        .{ SGR.Italic, "3m" },
        .{ SGR.Underline, "4m" },
        .{ SGR.SlowBlink, "5m" },
        .{ SGR.RapidBlink, "6m" },
        .{ SGR.Reverse, "7m" },
        .{ SGR.Conceal, "8m" },
        .{ SGR.CrossedOut, "9m" },
        .{ SGR.DefaultFont, "10m" },
        .{ SGR.AltFont1, "11m" },
        .{ SGR.AltFont2, "12m" },
        .{ SGR.AltFont3, "13m" },
        .{ SGR.AltFont4, "14m" },
        .{ SGR.AltFont5, "15m" },
        .{ SGR.AltFont6, "16m" },
        .{ SGR.AltFont7, "17m" },
        .{ SGR.AltFont8, "18m" },
        .{ SGR.AltFont9, "19m" },
        .{ SGR.Fraktur, "20m" },
        .{ SGR.DoubleUnderline, "21m" },
        .{ SGR.NormalIntensity, "22m" },
        .{ SGR.NoItalicNoFraktur, "23m" },
        .{ SGR.NoUnderline, "24m" },
        .{ SGR.NoBlink, "25m" },
        .{ SGR.ProportionalSpacing, "26m" },
        .{ SGR.NotReversed, "27m" },
        .{ SGR.Reveal, "28m" },
        .{ SGR.NotCrossedOut, "29m" },
        .{ SGR.FgBlack, "30m" },
        .{ SGR.FgRed, "31m" },
        .{ SGR.FgGreen, "32m" },
        .{ SGR.FgYellow, "33m" },
        .{ SGR.FgBlue, "34m" },
        .{ SGR.FgMagneta, "35m" },
        .{ SGR.FgCyan, "36m" },
        .{ SGR.FgWhite, "37m" },
        .{ SGR.FgExtended, "38m" },
        .{ SGR.DefaultForeground, "39m" },
        .{ SGR.BgBlack, "40m" },
        .{ SGR.BgRed, "41m" },
        .{ SGR.BgGreen, "42m" },
        .{ SGR.BgYellow, "43m" },
        .{ SGR.BgBlue, "44m" },
        .{ SGR.BgMagneta, "45m" },
        .{ SGR.BgCyan, "46m" },
        .{ SGR.BgWhite, "47m" },
        .{ SGR.BackgroundExtended, "48m" },
        .{ SGR.DefaultBackground, "49m" },
        .{ SGR.DisableProportionalSpacing, "50m" },
        .{ SGR.Framed, "51m" },
        .{ SGR.Encircled, "52m" },
        .{ SGR.Overlined, "53m" },
        .{ SGR.NeitherFramedNorEncircled, "54m" },
        .{ SGR.NotOverlined, "55m" },
        .{ SGR.SetUnderlineColor, "58m" },
        .{ SGR.DefaultUnderlineColor, "59m" },
        .{ SGR.Superscript, "73m" },
        .{ SGR.Subscript, "74m" },
        .{ SGR.NeitherSuperNorSub, "75m" },
        .{ SGR.FgBrightBlack, "90m" },
        .{ SGR.FgBrightRed, "91m" },
        .{ SGR.FgBrightGreen, "92m" },
        .{ SGR.FgBrightYellow, "93m" },
        .{ SGR.FgBrightBlue, "94m" },
        .{ SGR.FgBrightMagenta, "95m" },
        .{ SGR.FgBrightCyan, "96m" },
        .{ SGR.FgBrightWhite, "97m" },
        .{ SGR.BgBrightBlack, "100m" },
        .{ SGR.BgBrightRed, "101m" },
        .{ SGR.BgBrightGreen, "102m" },
        .{ SGR.BgBrightYellow, "103m" },
        .{ SGR.BgBrightBlue, "104m" },
        .{ SGR.BgBrightMagenta, "105m" },
        .{ SGR.BgBrightCyan, "106m" },
        .{ SGR.BgBrightWhite, "107m" },
    };

    for (tests, 0..) |entry, i| {
        _ = i;
        try expect(std.mem.eql(u8, entry[0].ansiCode(), entry[1]));
    }
}
